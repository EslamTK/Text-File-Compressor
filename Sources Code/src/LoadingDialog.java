
import java.awt.Frame;
import java.io.BufferedWriter;
import java.io.File;
import java.util.HashMap;
import java.util.Scanner;
import javax.swing.JOptionPane;

public class LoadingDialog extends javax.swing.JDialog {

    Frame parent;

    /**
     * Creates new form LoadingDialog
     */
    public LoadingDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        this.parent = parent;
    }

    public void updateDisplay() {
        jProgressBar1.setValue(jProgressBar1.getValue() + 25);
    }

    public void compressFile(File file, String destinationPath) {
        compressFile(file, destinationPath, "");
    }

    public void compressFile(File file, String destinationPath, String password) {
        parent.setVisible(false);
        this.setVisible(true);
        try {
            Scanner scan = new Scanner(file);
            String scannedFile = "";
            while (scan.hasNextLine()) {
                scannedFile = scannedFile + scan.nextLine() + "\n";
            }
            updateDisplay();

            Compress compressFile = new Compress();
            compressFile.compressFile(scannedFile);
            updateDisplay();
            String encodedFile = compressFile.getCompressedFile();
            HashMap<Character, String> encodedTable = compressFile.getEncodedTable();
            FileWriter fileWriter = new FileWriter();
            fileWriter.write(encodedFile, encodedTable, destinationPath, password);
            updateDisplay();

            this.setVisible(false);
            JOptionPane.showMessageDialog(this, "Done!", "Finish", JOptionPane.INFORMATION_MESSAGE);
            parent.setVisible(true);
            this.dispose();
        } catch (Exception ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            parent.setVisible(true);
            this.dispose();
        }
    }

    public void extractFile(File file, String destinationPath, String password) {
        parent.setVisible(false);
        this.setVisible(true);
        try {
            FileReader fileReader = new FileReader();
            fileReader.read(file, password);
            String encodedFile = fileReader.getEncodedFile();
            HashMap<Character, String> encodedTable = fileReader.getEncodedTable();
            updateDisplay();
            System.out.println(encodedFile);
            System.out.println(encodedTable);
            Extract extract = new Extract();
            extract.extractFile(encodedFile, encodedTable);
            String originalFile = extract.getExtractedFile();
            File outputFile = new File(destinationPath + ".txt");
            outputFile.createNewFile();
            BufferedWriter bufferedWriter = new BufferedWriter(new java.io.FileWriter(outputFile));
            originalFile = originalFile.replaceAll("\\n", System.lineSeparator());
            bufferedWriter.write(originalFile);
            bufferedWriter.close();
            updateDisplay();

            this.setVisible(false);
            JOptionPane.showMessageDialog(this, "Done!", "Finish", JOptionPane.INFORMATION_MESSAGE);
            parent.setVisible(true);
            this.dispose();
        } catch (Exception ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            parent.setVisible(true);
            this.dispose();
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jLabel1 = new javax.swing.JLabel();
        jProgressBar1 = new javax.swing.JProgressBar();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Loading");
        setMinimumSize(new java.awt.Dimension(280, 120));
        setModalityType(null);
        setResizable(false);
        java.awt.GridBagLayout layout = new java.awt.GridBagLayout();
        layout.columnWidths = new int[] {250};
        layout.rowHeights = new int[] {0};
        getContentPane().setLayout(layout);

        jLabel1.setText("Please wait..");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        getContentPane().add(jLabel1, gridBagConstraints);

        jProgressBar1.setStringPainted(true);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipady = 10;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 0, 0);
        getContentPane().add(jProgressBar1, gridBagConstraints);

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(LoadingDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(LoadingDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(LoadingDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(LoadingDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                LoadingDialog dialog = new LoadingDialog(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JProgressBar jProgressBar1;
    // End of variables declaration//GEN-END:variables
}
